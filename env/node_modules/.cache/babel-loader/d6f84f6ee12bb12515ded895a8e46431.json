{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\n\nconst OpenAIQuestion = ({\n  createMessage,\n  setMessages,\n  ...props\n}) => {\n  _s();\n\n  const [loading, setLoading] = useState(false); // This function will be triggered when the user sends a question\n\n  const handleQuestionSubmit = async question => {\n    if (!question) return;\n    setLoading(true);\n\n    try {\n      // Send the question to your Flask backend (assuming your API is at '/api/ask')\n      const response = await fetch('/api/ask', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          question\n        })\n      });\n      const data = await response.json(); // Send the answer back to the chatbot\n\n      const botResponse = createMessage(data.answer, {\n        widget: 'openaiQuestion'\n      });\n      setMessages(prevMessages => [...prevMessages, botResponse]);\n    } catch (error) {\n      const errorResponse = createMessage('Lo siento, algo salió mal.', {\n        widget: 'openaiQuestion'\n      });\n      setMessages(prevMessages => [...prevMessages, errorResponse]);\n    } finally {\n      setLoading(false);\n    }\n  }; // This listens for the chatbot's message input and triggers the question submission\n\n\n  const handleMessageInput = message => {\n    handleQuestionSubmit(message);\n  };\n\n  return null; // The component doesn't render any UI; it just processes messages\n};\n\n_s(OpenAIQuestion, \"/Rjh5rPqCCqf0XYnTUk9ZNavw3Q=\");\n\n_c = OpenAIQuestion;\nexport default OpenAIQuestion;\n\nvar _c;\n\n$RefreshReg$(_c, \"OpenAIQuestion\");","map":{"version":3,"sources":["/home/avallejos/Escritorio/learning-chatbot-master/src/components/OpenAIQuestion/OpenAIQuestion.js"],"names":["React","useState","OpenAIQuestion","createMessage","setMessages","props","loading","setLoading","handleQuestionSubmit","question","response","fetch","method","headers","body","JSON","stringify","data","json","botResponse","answer","widget","prevMessages","error","errorResponse","handleMessageInput","message"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,WAAjB;AAA8B,KAAGC;AAAjC,CAAD,KAA8C;AAAA;;AACnE,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,KAAD,CAAtC,CADmE,CAGnE;;AACA,QAAMO,oBAAoB,GAAG,MAAOC,QAAP,IAAoB;AAC/C,QAAI,CAACA,QAAL,EAAe;AAEfF,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACF;AACA,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,UAAD,EAAa;AACvCC,QAAAA,MAAM,EAAE,MAD+B;AAEvCC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAF8B;AAGvCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,UAAAA;AAAF,SAAf;AAHiC,OAAb,CAA5B;AAKA,YAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB,CAPE,CASF;;AACA,YAAMC,WAAW,GAAGhB,aAAa,CAACc,IAAI,CAACG,MAAN,EAAc;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAd,CAAjC;AACAjB,MAAAA,WAAW,CAAEkB,YAAD,IAAkB,CAAC,GAAGA,YAAJ,EAAkBH,WAAlB,CAAnB,CAAX;AACD,KAZD,CAYE,OAAOI,KAAP,EAAc;AACd,YAAMC,aAAa,GAAGrB,aAAa,CAAC,4BAAD,EAA+B;AAAEkB,QAAAA,MAAM,EAAE;AAAV,OAA/B,CAAnC;AACAjB,MAAAA,WAAW,CAAEkB,YAAD,IAAkB,CAAC,GAAGA,YAAJ,EAAkBE,aAAlB,CAAnB,CAAX;AACD,KAfD,SAeU;AACRjB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAvBD,CAJmE,CA6BnE;;;AACA,QAAMkB,kBAAkB,GAAIC,OAAD,IAAa;AACtClB,IAAAA,oBAAoB,CAACkB,OAAD,CAApB;AACD,GAFD;;AAIA,SAAO,IAAP,CAlCmE,CAkCrD;AACf,CAnCD;;GAAMxB,c;;KAAAA,c;AAqCN,eAAeA,cAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst OpenAIQuestion = ({ createMessage, setMessages, ...props }) => {\n  const [loading, setLoading] = useState(false);\n\n  // This function will be triggered when the user sends a question\n  const handleQuestionSubmit = async (question) => {\n    if (!question) return;\n\n    setLoading(true);\n\n    try {\n      // Send the question to your Flask backend (assuming your API is at '/api/ask')\n      const response = await fetch('/api/ask', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ question }),\n      });\n      const data = await response.json();\n      \n      // Send the answer back to the chatbot\n      const botResponse = createMessage(data.answer, { widget: 'openaiQuestion' });\n      setMessages((prevMessages) => [...prevMessages, botResponse]);\n    } catch (error) {\n      const errorResponse = createMessage('Lo siento, algo salió mal.', { widget: 'openaiQuestion' });\n      setMessages((prevMessages) => [...prevMessages, errorResponse]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // This listens for the chatbot's message input and triggers the question submission\n  const handleMessageInput = (message) => {\n    handleQuestionSubmit(message);\n  };\n\n  return null;  // The component doesn't render any UI; it just processes messages\n};\n\nexport default OpenAIQuestion;\n"]},"metadata":{},"sourceType":"module"}