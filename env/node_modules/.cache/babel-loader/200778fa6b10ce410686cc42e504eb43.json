{"ast":null,"code":"var _jsxFileName = \"/home/avallejos/Escritorio/learning-chatbot-master/src/config.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { createChatBotMessage } from 'react-chatbot-kit';\nimport LearningOptions from './components/LearningOptions/learningOptions';\nimport LinkList from './components/LinkList/LinkList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = {\n  botName: \"LearningBot\",\n  initialMessages: [createChatBotMessage(\"Hola, estoy para ayudar. ¿Qué te gustaría aprender?\", {\n    widget: \"learningOptions\"\n  })],\n  widgets: [{\n    widgetName: \"learningOptions\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(LearningOptions, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 30\n    }, this)\n  }, {\n    widgetName: \"javascriptLinks\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(LinkList, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 30\n    }, this),\n    props: {\n      options: [{\n        text: \"Introduction to JS\",\n        url: \"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/\",\n        id: 1\n      }, {\n        text: \"Mozilla JS Guide\",\n        url: \"https://developer.mozilla.org/en-US/docs/Web/Javascript/Guide\",\n        id: 2\n      }, {\n        text: \"Frontend Masters\",\n        url: \"https://frontendmasters.com\",\n        id: 3\n      }]\n    }\n  }, {\n    widgetName: \"openaiQuestion\",\n    widgetFunc: props => /*#__PURE__*/_jsxDEV(OpenAIQuestion, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 30\n    }, this)\n  }]\n};\n\nfunction OpenAIQuestion(props) {\n  _s();\n\n  const [question, setQuestion] = useState(\"\");\n  const [answer, setAnswer] = useState(\"\");\n\n  const askQuestion = async () => {\n    const response = await fetch(\"http://localhost:5000/ask\", {\n      // Call your Flask API\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        question\n      })\n    });\n    const data = await response.json();\n    setAnswer(data.answer); // Display the OpenAI's response in the chat\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: question,\n      onChange: e => setQuestion(e.target.value),\n      placeholder: \"Escribe tu pregunta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: askQuestion,\n      children: \"Preguntar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), answer && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Respuesta: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 23\n      }, this), answer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(OpenAIQuestion, \"dVijXm+eIaUVMus3afQ4nLRSQHQ=\");\n\n_c = OpenAIQuestion;\nexport default config;\n\nvar _c;\n\n$RefreshReg$(_c, \"OpenAIQuestion\");","map":{"version":3,"sources":["/home/avallejos/Escritorio/learning-chatbot-master/src/config.js"],"names":["React","useState","createChatBotMessage","LearningOptions","LinkList","config","botName","initialMessages","widget","widgets","widgetName","widgetFunc","props","options","text","url","id","OpenAIQuestion","question","setQuestion","answer","setAnswer","askQuestion","response","fetch","method","headers","body","JSON","stringify","data","json","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,oBAAT,QAAqC,mBAArC;AACA,OAAOC,eAAP,MAA4B,8CAA5B;AACA,OAAOC,QAAP,MAAqB,gCAArB;;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE,aADI;AAEbC,EAAAA,eAAe,EAAE,CACfL,oBAAoB,CAAC,qDAAD,EAAwD;AAC1EM,IAAAA,MAAM,EAAE;AADkE,GAAxD,CADL,CAFJ;AAObC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,iBADd;AAEEC,IAAAA,UAAU,EAAGC,KAAD,iBAAW,QAAC,eAAD,OAAqBA;AAArB;AAAA;AAAA;AAAA;AAAA;AAFzB,GADO,EAKP;AACEF,IAAAA,UAAU,EAAE,iBADd;AAEEC,IAAAA,UAAU,EAAGC,KAAD,iBAAW,QAAC,QAAD,OAAcA;AAAd;AAAA;AAAA;AAAA;AAAA,YAFzB;AAGEA,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE,CACP;AACEC,QAAAA,IAAI,EAAE,oBADR;AAEEC,QAAAA,GAAG,EAAE,gGAFP;AAGEC,QAAAA,EAAE,EAAE;AAHN,OADO,EAMP;AACEF,QAAAA,IAAI,EAAE,kBADR;AAEEC,QAAAA,GAAG,EAAE,+DAFP;AAGEC,QAAAA,EAAE,EAAE;AAHN,OANO,EAWP;AACEF,QAAAA,IAAI,EAAE,kBADR;AAEEC,QAAAA,GAAG,EAAE,6BAFP;AAGEC,QAAAA,EAAE,EAAE;AAHN,OAXO;AADJ;AAHT,GALO,EA4BP;AACEN,IAAAA,UAAU,EAAE,gBADd;AAEEC,IAAAA,UAAU,EAAGC,KAAD,iBAAW,QAAC,cAAD,OAAoBA;AAApB;AAAA;AAAA;AAAA;AAAA;AAFzB,GA5BO;AAPI,CAAf;;AA0CA,SAASK,cAAT,CAAwBL,KAAxB,EAA+B;AAAA;;AAC7B,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACmB,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMqB,WAAW,GAAG,YAAY;AAC9B,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2BAAD,EAA8B;AAAG;AAC3DC,MAAAA,MAAM,EAAE,MADgD;AAExDC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF+C;AAKxDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEX,QAAAA;AAAF,OAAf;AALkD,KAA9B,CAA5B;AAQA,UAAMY,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAAnB;AACAV,IAAAA,SAAS,CAACS,IAAI,CAACV,MAAN,CAAT,CAV8B,CAUL;AAC1B,GAXD;;AAaA,sBACE;AAAA,4BACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAEF,QAFT;AAGE,MAAA,QAAQ,EAAGc,CAAD,IAAOb,WAAW,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV,CAH9B;AAIE,MAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAQ,MAAA,OAAO,EAAEZ,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,EAQGF,MAAM,iBAAI;AAAA,8BAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAL,EAAkCA,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,YARb;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GA7BQH,c;;KAAAA,c;AA+BT,eAAeZ,MAAf","sourcesContent":["import React, { useState } from 'react';\nimport { createChatBotMessage } from 'react-chatbot-kit';\nimport LearningOptions from './components/LearningOptions/learningOptions';\nimport LinkList from './components/LinkList/LinkList';\n\nconst config = {\n  botName: \"LearningBot\",\n  initialMessages: [\n    createChatBotMessage(\"Hola, estoy para ayudar. ¿Qué te gustaría aprender?\", {\n      widget: \"learningOptions\",\n    }),\n  ],\n  widgets: [\n    {\n      widgetName: \"learningOptions\",\n      widgetFunc: (props) => <LearningOptions {...props} />,\n    },\n    {\n      widgetName: \"javascriptLinks\",\n      widgetFunc: (props) => <LinkList {...props} />,\n      props: {\n        options: [\n          {\n            text: \"Introduction to JS\",\n            url: \"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/\",\n            id: 1,\n          },\n          {\n            text: \"Mozilla JS Guide\",\n            url: \"https://developer.mozilla.org/en-US/docs/Web/Javascript/Guide\",\n            id: 2,\n          },\n          {\n            text: \"Frontend Masters\",\n            url: \"https://frontendmasters.com\",\n            id: 3,\n          },\n        ],\n      },\n    },\n    {\n      widgetName: \"openaiQuestion\",\n      widgetFunc: (props) => <OpenAIQuestion {...props} />,\n    },\n  ],\n};\n\nfunction OpenAIQuestion(props) {\n  const [question, setQuestion] = useState(\"\");\n  const [answer, setAnswer] = useState(\"\");\n\n  const askQuestion = async () => {\n    const response = await fetch(\"http://localhost:5000/ask\", {  // Call your Flask API\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ question }),\n    });\n\n    const data = await response.json();\n    setAnswer(data.answer);  // Display the OpenAI's response in the chat\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={question}\n        onChange={(e) => setQuestion(e.target.value)}\n        placeholder=\"Escribe tu pregunta\"\n      />\n      <button onClick={askQuestion}>Preguntar</button>\n      {answer && <div><strong>Respuesta: </strong>{answer}</div>}\n    </div>\n  );\n}\n\nexport default config;\n"]},"metadata":{},"sourceType":"module"}